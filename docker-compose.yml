services:
  # Database (SQLite will be file-based, but keeping this for future PostgreSQL option)
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: minectrl
      POSTGRES_USER: minectrl
      POSTGRES_PASSWORD: minectrl
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U minectrl"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Redis (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - redis

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      - DATABASE_URL=${DATABASE_URL:-file:/app/data/dev.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_ENABLED=${REDIS_ENABLED:-false}
      - JWT_SECRET=${JWT_SECRET:-dev-secret}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - NODE_ENV=production
    volumes:
      - app_data:/app/data
      - minecraft_data:/data/minecraft
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - redis

  # Backend without Redis
  backend-standalone:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      - DATABASE_URL=${DATABASE_URL:-file:/app/data/dev.db}
      - REDIS_ENABLED=false
      - JWT_SECRET=${JWT_SECRET:-dev-secret}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - NODE_ENV=production
      - SERVERS_BASE_DIR=/data/minecraft
      - HOST_SERVERS_PATH=${HOST_SERVERS_PATH:-/opt/dev/mcmanager/minecraft-servers}
    volumes:
      - app_data:/app/data
      - ${MINECRAFT_DATA_DIR:-./minecraft-servers}:/data/minecraft
    privileged: true
    pid: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend-standalone
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  app_data:
  minecraft_data:
